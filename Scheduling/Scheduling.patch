diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..70e34ec
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.errorSquiggles": "disabled"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..6978d95 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..cda13de 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,9 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+int             settickets(int); 
+int             getpinfo(uint64);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..9d031e5 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define BOOST_INTERVAL 64
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define DEFAULT_TICKET_COUNT 10
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..657482c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -54,6 +55,14 @@ procinit(void)
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
+
+
+p->inuse = 0;
+p->inQ = 0;
+p->tickets_original = 0;
+p->tickets_current = 0;
+p->time_slices = 0;
+
       p->kstack = KSTACK((int) (p - proc));
   }
 }
@@ -124,6 +133,11 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+p->inuse = 1;
+p->inQ = 1;
+p->tickets_original = DEFAULT_TICKET_COUNT;
+p->tickets_current = DEFAULT_TICKET_COUNT;
+p->time_slices = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -318,7 +332,17 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+  int tickets_original = 0;
+  acquire(&p->lock);
+  tickets_original = p->tickets_original;
+  release(&p->lock);
+
   acquire(&np->lock);
+
+  np->tickets_original = tickets_original;
+  np->tickets_current = tickets_original;
+  np->time_slices = 0;
+
   np->state = RUNNABLE;
   release(&np->lock);
 
@@ -441,33 +465,121 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+
+
+
+uint64 seed = 123456789;
+int rand(int size)
+{
+    if(size==0) return 0;
+    seed = (seed*1000000007+998244353)%(uint64)size+1;
+    return (int)seed;
+}
+
+void priority_boosting()
+{
+    struct proc *p;
+    for(p = proc; p<&proc[NPROC]; p++)
+      p->inQ = 1;
+}
+
+void reinitialize()
+{
+    struct proc *p;
+    for(p = proc; p<&proc[NPROC]; p++)
+      p->tickets_current = p->tickets_original;
+}
+
+extern uint ticks;
+
 void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *q;
   struct cpu *c = mycpu();
   
   c->proc = 0;
+  int secondQueueCount=0;
+  q = proc;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+  //lotery scheduling starts
+    if(ticks%BOOST_INTERVAL == 0) priority_boosting();
+
+    int cnt=0;
+    for(p = proc; p<&proc[NPROC]; p++){
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
+        cnt+=p->tickets_current;
+      }
+      release(&p->lock);
+    }
+    if(cnt==0) reinitialize();
+
+    
+    int total_ticket=0;
+    for(p = proc; p<&proc[NPROC]; p++){
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if(p->inQ == 1 && p->state == RUNNABLE){
+        total_ticket+=p->tickets_current;
+      }
+      release(&p->lock);
+
+    }
+    int ran = rand(total_ticket); 
+    int sum=0, ok=0;
+    for(p = proc; p<&proc[NPROC]; p++){
+      acquire(&p->lock);//printf("Hello %d %d %d %d %d\n", p->pid, p->inQ, p->state, ran, total_ticket);
+      if(p->inQ == 1 && p->state == RUNNABLE){
+        sum+=p->tickets_current;
+        if(sum>=ran && p->tickets_current!=0 && !ok){
+            ok=1;
+            p->state = RUNNING;
+            p->tickets_current--;
+            c->proc = p;
+            swtch(&c->context, &p->context);
+            p->time_slices++;
+            p->inQ=2;
+            c->proc = 0;
+        }
+      }
+      release(&p->lock);
+    }
+    if(ok) continue;
+
+    int ok1=0;
+    while(1) {
+      acquire(&q->lock);
+      if(q->state == RUNNABLE && q->inQ==2) {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
+        ok1=1;
+        q->state = RUNNING;
+        c->proc = q;
+        swtch(&c->context, &q->context);
+        q->time_slices++;
+        q->inQ=1;
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
       }
-      release(&p->lock);
+
+      release(&q->lock);
+      secondQueueCount++;
+      if(secondQueueCount == NPROC) {
+        secondQueueCount = 0;
+        q = proc;
+        break;
+      }
+      else q++;
+      if(ok1) break;
+      
     }
+
   }
 }
 
@@ -681,3 +793,32 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+int settickets(int tc){
+
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->tickets_original = tc; //printf("%d %d\n",tc, p->pid);
+  p->tickets_current = tc;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(uint64 addr){
+  struct proc *p;
+  struct pstat pst;
+  int i=0;
+  for(p = proc; p < &proc[NPROC]; p++,i++){
+    pst.pid[i] = p->pid; //printf("%d %d\n",p->pid, i);
+    pst.inQ[i] = p->inQ;
+    if(p->state == UNUSED) pst.inuse[i]=0;
+    else pst.inuse[i]=1;
+    pst.tickets_original[i] = p->tickets_original;
+    pst.tickets_current[i] = p->tickets_current;
+    pst.time_slices[i] = p->time_slices;
+  }
+  if(copyout(myproc()->pagetable, addr, (char *)&pst, sizeof(pst)) < 0)
+    return -1;
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c58db0a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -92,6 +92,12 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+int inuse; // whether this slot of the process table is being used (1 or 0)
+int inQ; // which queue the process is currently in
+int tickets_original; // the number of tickets each process originally had
+int tickets_current; // the number of tickets each process currently has
+int time_slices;
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..713ce28
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..b4ce610 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets, 
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..92a8666 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22 
+#define SYS_getpinfo  23 
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..171c189 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+extern int settickets(int);
+extern int getpinfo(uint64);
+
+uint64
+sys_settickets(void)
+{
+  int ticketCount;
+  argint(0,&ticketCount);
+  if( ticketCount < 0)
+    return -1;
+  return settickets(ticketCount);
+  return 0;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  if( addr < 0 )
+    return -1;
+  return getpinfo(addr); 
+}
\ No newline at end of file
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..8375790
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc,char *argv[]){
+
+   if( argc<2){
+        fprintf(2, "Usage: %s exec failed\n", argv[0]);
+        exit(1);
+    }
+    int ticket = atoi(argv[1]);
+    if (settickets(ticket) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    if( !fork()){
+        for(;;);
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..6fbdbdc
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+int main(int argc,char *argv[]){
+    struct pstat pst;
+    if (getpinfo(&pst) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    printf("PID | In Use | inQ | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0;i<NPROC;i++){
+        if(pst.pid[i]!=0){
+            printf("%d\t%d\t%d\t%d\t\t\t%d\t\t%d\n",
+                pst.pid[i],pst.inuse[i],pst.inQ[i],pst.tickets_original[i],
+                pst.tickets_current[i],pst.time_slices[i]);
+        }
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..e77dbab 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,6 @@
 struct stat;
+struct pstat;
+
 
 // system calls
 int fork(void);
@@ -22,6 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int); 
+int getpinfo(struct pstat*); 
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..5639c88 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets"); 
+entry("getpinfo"); 
